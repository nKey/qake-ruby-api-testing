var search_data = {"index":{"searchIndex":["apidocscontroller","applicationcontroller","applicationrecord","exceptionhandler","historiescontroller","historyutils","response","score","scorescontroller","after()","aggregate_scores()","before()","by_players()","create()","destroy()","index()","index()","json_response()","show()","show()"],"longSearchIndex":["apidocscontroller","applicationcontroller","applicationrecord","exceptionhandler","historiescontroller","historyutils","response","score","scorescontroller","score::after()","historyutils::aggregate_scores()","score::before()","score::by_players()","scorescontroller#create()","scorescontroller#destroy()","apidocscontroller#index()","scorescontroller#index()","response#json_response()","historiescontroller#show()","scorescontroller#show()"],"info":[["ApidocsController","","ApidocsController.html","","<p>This Controller serves the Swagger UI for the API Documentation\n"],["ApplicationController","","ApplicationController.html","","<p>Base class for all controllers. Includes common modules to handle output format, exception handling and …\n"],["ApplicationRecord","","ApplicationRecord.html","","<p>This abstract class is the base class for all ActiveRecords models. It&#39;s used to include common functionality …\n"],["ExceptionHandler","","ExceptionHandler.html","","<p>Provides common exception handling for all api controllers\n"],["HistoriesController","","HistoriesController.html","","<p>This controller provides the API to retrieve the score history of a given player\n<p>For more details on the …\n"],["HistoryUtils","","HistoryUtils.html","","<p>Utility class that calculates aggregate results from a list of scores. Scores of multiple players can …\n"],["Response","","Response.html","","<p>Provides utility methods to render response objects\n"],["Score","","Score.html","","<p>Represents a score for the game, achieved by a specific player at the specified time All attributes are …\n"],["ScoresController","","ScoresController.html","","<p>This controller provides the CRUD api functionality for the Score resource.\n<p>For more details on the JSON …\n"],["after","Score","Score.html#method-c-after","(date)","<p>Returns an ActiveRecord::Relation that filters the scores after the given `date`. A DateTime object should …\n"],["aggregate_scores","HistoryUtils","HistoryUtils.html#method-c-aggregate_scores","(scores)",""],["before","Score","Score.html#method-c-before","(date)","<p>Returns an ActiveRecord::Relation that filters the scores before the given `date`. A DateTime object …\n"],["by_players","Score","Score.html#method-c-by_players","(players)","<p>Returns an ActiveRecord::Relation that filters the scores by the given `players`. `players` can be a …\n"],["create","ScoresController","ScoresController.html#method-i-create","()",""],["destroy","ScoresController","ScoresController.html#method-i-destroy","()",""],["index","ApidocsController","ApidocsController.html#method-i-index","()",""],["index","ScoresController","ScoresController.html#method-i-index","()",""],["json_response","Response","Response.html#method-i-json_response","(object, status = :ok)",""],["show","HistoriesController","HistoriesController.html#method-i-show","()",""],["show","ScoresController","ScoresController.html#method-i-show","()",""]]}}